[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 GenomicTK authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"/articles/Standard.html","id":"names","dir":"Articles","previous_headings":"Variables","what":"Names","title":"Standard","text":"Variable names must written according camelCase convention. .e. entirely lower case except first letters second subsequent words. name variable try put extension separated dot. extension informs object class variable. extension must written entirely lower case must abbreviation. variables several possible object classes, separate extensions underscore.","code":""},{"path":"/articles/Standard.html","id":"extensions","dir":"Articles","previous_headings":"Variables","what":"Extensions","title":"Standard","text":".chr <character> … .pth <character> File path .dir <character> Directory path .num <numeric> … .int <numeric> Integer .ndx <numeric> Position Number .tim <numeric> Time .fac <factor> Factor .idn <factor character numeric> Identifier (unique) .lgk <logical function> Logical expression .bln <logical> Boolean .fun <function> Function .<> .lst <list> … .nst <list> Nested List .{*}_vec <*> Vector specific class .{*}_lst <list> list specific class .dtf <data.frame> … .tbl <tibble> … .mtx <matrix> … .spm <dgCMatrix dgRMatrix Matrix format> Sparse matrix .gnr <GRanges> … .gnp <Pairs> GeNomic ranges Pairs .gni <GInteractions> GeNomic Interactions .cmx <ContactMatrix> Contact Matrix .ggp <gg ggplot> ggplot object .col <character numeric list> color format","code":""},{"path":"/articles/Standard.html","id":"functions","dir":"Articles","previous_headings":"","what":"Functions","title":"Standard","text":"Functions names must written according camelCase convention. .e. entirely lower case except first letters words. name function action, verb question.","code":""},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Nicolas Chanard \\. Maintainer.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"\\<ff> NC (2022). GenomicTK: Set genomic data manipulation tools. R package version 0.1.0.","code":"@Manual{,   title = {GenomicTK: Set of genomic data manipulation tools},   author = {Nicolas Chanard \\},   year = {2022},   note = {R package version 0.1.0}, }"},{"path":"/index.html","id":"genomictk-","dir":"","previous_headings":"","what":"Set of genomic data manipulation tools","title":"Set of genomic data manipulation tools","text":"GenomicTK Set genomic data manipulation tools.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Set of genomic data manipulation tools","text":"can install development version GenomicTK GitHub :","code":"devtools::install_github(\"NChanard/GenomicTK\")"},{"path":"/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Set of genomic data manipulation tools","text":"GenomicTK","code":""},{"path":"/reference/BinGRanges.html","id":null,"dir":"Reference","previous_headings":"","what":"Bin a GRanges. — BinGRanges","title":"Bin a GRanges. — BinGRanges","text":"BinGRanges Bin GRanges allow apply summary method (e.g: 'mean', 'median', 'sum', 'max, 'min' ...) chossen numericals variables ranges bin.","code":""},{"path":"/reference/BinGRanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Bin a GRanges. — BinGRanges","text":"","code":"BinGRanges(   gRange.gnr = NULL,   chromSize.dtf = NULL,   binSize.int = NULL,   method.chr = \"mean\",   variablesName.chr_vec = NULL,   na.rm = TRUE,   cores.num = 1,   reduce.bln = TRUE,   verbose.bln = TRUE )"},{"path":"/reference/BinGRanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Bin a GRanges. — BinGRanges","text":"gRange.gnr <GRanges>: GRanges bin. chromSize.dtf <data.frame>: data.frame first colum correspond chromosomes names, second column correspond chromosomes lengths base pairs. binSize.int <integer>: width bins. method.chr <character>: name summary method 'mean', 'median', 'sum', 'max, 'min'. (Default 'mean') variablesName.chr_vec <character> : character vector specify metadata columns GRanges apply summary method. na.rm <logical> : logical value indicating whether 'NA' values stripped computation proceeds. (Default TRUE) cores.num <integer> : number cores. (Default 1) reduce.bln <logical> : whether duplicated Bin must reduced de summary method. (Default TRUE) verbose.bln <logical>: TRUE show progression console. (Default TRUE)","code":""},{"path":"/reference/BinGRanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Bin a GRanges. — BinGRanges","text":"binned GRanges.","code":""},{"path":"/reference/BinGRanges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Bin a GRanges. — BinGRanges","text":"","code":"GRange.gnr <- GenomicRanges::GRanges(     seqnames = S4Vectors::Rle(c(\"chr1\", \"chr2\"), c(3, 1)),     ranges = IRanges::IRanges(c(1,201,251,1), end = c(200,250,330,100), names = letters[1:4]),     strand = S4Vectors::Rle(BiocGenerics::strand(c(\"*\")), 4),     score = c(50,NA,100,30)     ) GRange.gnr #> GRanges object with 4 ranges and 1 metadata column: #>     seqnames    ranges strand |     score #>        <Rle> <IRanges>  <Rle> | <numeric> #>   a     chr1     1-200      * |        50 #>   b     chr1   201-250      * |        NA #>   c     chr1   251-330      * |       100 #>   d     chr2     1-100      * |        30 #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths chromSize.dtf = data.frame(c(\"chr1\",\"chr2\"),c(350,100)) binSize.int <- 100 binnedGRanges.gnr <- BinGRanges(     gRange.gnr = GRange.gnr,     chromSize.dtf=chromSize.dtf,     binSize.int=binSize.int,     method.chr =\"mean\",     variablesName.chr_vec=\"score\",     na.rm=TRUE ) #>  #>  100.00 %  binnedGRanges.gnr #> GRanges object with 5 ranges and 2 metadata columns: #>       seqnames    ranges strand |     score         bin #>          <Rle> <IRanges>  <Rle> | <numeric> <character> #>   [1]     chr1     1-100      * |        50      chr1:1 #>   [2]     chr1   101-200      * |        50      chr1:2 #>   [3]     chr1   201-300      * |       100      chr1:3 #>   [4]     chr1   301-350      * |       100      chr1:4 #>   [5]     chr2     1-100      * |        30      chr2:1 #>   ------- #>   seqinfo: 2 sequences from an unspecified genome"},{"path":"/reference/GenomicSystem.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert numbers of base pairs into string and vice versa. — GenomicSystem","title":"Convert numbers of base pairs into string and vice versa. — GenomicSystem","text":"GenomicSystem Convert numbers base string order magnitude (Kbp, Mbp, Gbp) vice versa.","code":""},{"path":"/reference/GenomicSystem.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert numbers of base pairs into string and vice versa. — GenomicSystem","text":"","code":"GenomicSystem(x, digits.num = 3)"},{"path":"/reference/GenomicSystem.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert numbers of base pairs into string and vice versa. — GenomicSystem","text":"x <character numeric>: number convert string convert. digits.num <integer>: number significant digits used. See signif() informations. (Default 3)","code":""},{"path":"/reference/GenomicSystem.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert numbers of base pairs into string and vice versa. — GenomicSystem","text":"converted number string.","code":""},{"path":"/reference/GenomicSystem.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert numbers of base pairs into string and vice versa. — GenomicSystem","text":"","code":"GenomicSystem(1540,3) #> [1] \"1.54Kbp\" GenomicSystem(1540,2) #> [1] \"1.5Kbp\" GenomicSystem(\"1Mbp\") #> [1] 1e+06 GenomicSystem(\"1Kbp\") #> [1] 1000 GenomicSystem(\"1k\") #> [1] 1000"},{"path":"/reference/MergeGRanges.html","id":null,"dir":"Reference","previous_headings":"","what":"Merge GRanges or a list of GRanges — MergeGRanges","title":"Merge GRanges or a list of GRanges — MergeGRanges","text":"MergeGRanges Merge GRanges list GRanges","code":""},{"path":"/reference/MergeGRanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Merge GRanges or a list of GRanges — MergeGRanges","text":"","code":"MergeGRanges(..., sort.bln = FALSE, reduce.bln = FALSE)"},{"path":"/reference/MergeGRanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Merge GRanges or a list of GRanges — MergeGRanges","text":"... <GRanges GRangesList list[GRanges]>: GRanges list GRanges GRangesList. sort.bln <logical>: whether result sorted. (Default FALSE) reduce.bln <logical>: whether result reduce. See GenomicRanges::reduce details. (Default FALSE)","code":""},{"path":"/reference/MergeGRanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Merge GRanges or a list of GRanges — MergeGRanges","text":"GRange object.","code":""},{"path":"/reference/MergeGRanges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Merge GRanges or a list of GRanges — MergeGRanges","text":"","code":"GRange_1.grn <- GenomicRanges::GRanges(     seqnames = S4Vectors::Rle(c(\"chr1\", \"chr2\", \"chr1\"), c(1, 3, 1)),     ranges = IRanges::IRanges(101:105, end = 111:115, names = letters[1:5]),     strand = S4Vectors::Rle(BiocGenerics::strand(c(\"-\", \"+\", \"*\", \"+\")), c(1, 1, 2, 1)),     score = 1:5 ) GRange_2.grn <- GenomicRanges::GRanges(     seqnames = S4Vectors::Rle(c(\"chr1\", \"chr3\"), c(1, 4)),     ranges = IRanges::IRanges(106:110, end = 116:120, names = letters[6:10]),     strand = S4Vectors::Rle(BiocGenerics::strand(c(\"*\", \"+\", \"-\")), c(2, 1, 2)),     score = 6:10 ) GRange_1.grn #> GRanges object with 5 ranges and 1 metadata column: #>     seqnames    ranges strand |     score #>        <Rle> <IRanges>  <Rle> | <integer> #>   a     chr1   101-111      - |         1 #>   b     chr2   102-112      + |         2 #>   c     chr2   103-113      * |         3 #>   d     chr2   104-114      * |         4 #>   e     chr1   105-115      + |         5 #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths GRange_2.grn #> GRanges object with 5 ranges and 1 metadata column: #>     seqnames    ranges strand |     score #>        <Rle> <IRanges>  <Rle> | <integer> #>   f     chr1   106-116      * |         6 #>   g     chr3   107-117      * |         7 #>   h     chr3   108-118      + |         8 #>   i     chr3   109-119      - |         9 #>   j     chr3   110-120      - |        10 #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths MergeGRanges(GRange_1.grn,GRange_2.grn) #> GRanges object with 10 ranges and 1 metadata column: #>     seqnames    ranges strand |     score #>        <Rle> <IRanges>  <Rle> | <integer> #>   a     chr1   101-111      - |         1 #>   b     chr2   102-112      + |         2 #>   c     chr2   103-113      * |         3 #>   d     chr2   104-114      * |         4 #>   e     chr1   105-115      + |         5 #>   f     chr1   106-116      * |         6 #>   g     chr3   107-117      * |         7 #>   h     chr3   108-118      + |         8 #>   i     chr3   109-119      - |         9 #>   j     chr3   110-120      - |        10 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths GRange.lst = list(GRange_1.grn,GRange_2.grn) MergeGRanges(GRange.lst) #> GRanges object with 10 ranges and 1 metadata column: #>     seqnames    ranges strand |     score #>        <Rle> <IRanges>  <Rle> | <integer> #>   a     chr1   101-111      - |         1 #>   b     chr2   102-112      + |         2 #>   c     chr2   103-113      * |         3 #>   d     chr2   104-114      * |         4 #>   e     chr1   105-115      + |         5 #>   f     chr1   106-116      * |         6 #>   g     chr3   107-117      * |         7 #>   h     chr3   108-118      + |         8 #>   i     chr3   109-119      - |         9 #>   j     chr3   110-120      - |        10 #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths MergeGRanges(GRange.lst, reduce.bln=TRUE) #> GRanges object with 8 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chr1   105-115      + #>   [2]     chr1   101-111      - #>   [3]     chr1   106-116      * #>   [4]     chr2   102-112      + #>   [5]     chr2   103-114      * #>   [6]     chr3   108-118      + #>   [7]     chr3   109-120      - #>   [8]     chr3   107-117      * #>   ------- #>   seqinfo: 3 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/SeqEnds.html","id":null,"dir":"Reference","previous_headings":"","what":"Get all sequences lengths. — SeqEnds","title":"Get all sequences lengths. — SeqEnds","text":"SeqEnds Get sequences lengths ranges GRanges object.","code":""},{"path":"/reference/SeqEnds.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get all sequences lengths. — SeqEnds","text":"","code":"SeqEnds(x.gnr)"},{"path":"/reference/SeqEnds.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get all sequences lengths. — SeqEnds","text":"x.gnr <GRanges>: GRanges object.","code":""},{"path":"/reference/SeqEnds.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get all sequences lengths. — SeqEnds","text":"integer vector.","code":""},{"path":"/reference/SeqEnds.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get all sequences lengths. — SeqEnds","text":"","code":"GRange.grn <- GenomicRanges::GRanges(     seqnames = S4Vectors::Rle(c(\"chr1\", \"chr2\", \"chr1\"), c(1, 3, 1)),     ranges = IRanges::IRanges(101:105, end = 111:115, names = letters[1:5]),     strand = S4Vectors::Rle(BiocGenerics::strand(c(\"-\", \"+\", \"*\", \"+\")), c(1, 1, 2, 1)),     seqinfo = c(chr1=200, chr2=300),     score = 1:5 ) SeqEnds(GRange.grn) #> chr1 chr2 chr2 chr2 chr1  #>  200  300  300  300  200"},{"path":"/reference/StrToGRanges.html","id":null,"dir":"Reference","previous_headings":"","what":"Convert String in GRanges object — StrToGRanges","title":"Convert String in GRanges object — StrToGRanges","text":"StrToGRanges Convert ranges describe string (.e seqname:start-end:strand) GRanges object.","code":""},{"path":"/reference/StrToGRanges.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Convert String in GRanges object — StrToGRanges","text":"","code":"StrToGRanges(x.chr_vec)"},{"path":"/reference/StrToGRanges.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Convert String in GRanges object — StrToGRanges","text":"x.chr_vec <character>: strings convert GRanges.","code":""},{"path":"/reference/StrToGRanges.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Convert String in GRanges object — StrToGRanges","text":"GRanges object.","code":""},{"path":"/reference/StrToGRanges.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Convert String in GRanges object — StrToGRanges","text":"","code":"StrToGRanges(\"chr1:1-100:+\") #> GRanges object with 1 range and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chr1     1-100      + #>   ------- #>   seqinfo: 1 sequence from an unspecified genome; no seqlengths StrToGRanges(c(\"chr1:1-100:+\",\"chr2:400-500:-\",\"chr1:10-50:*\")) #> GRanges object with 3 ranges and 0 metadata columns: #>       seqnames    ranges strand #>          <Rle> <IRanges>  <Rle> #>   [1]     chr1     1-100      + #>   [2]     chr2   400-500      - #>   [3]     chr1     10-50      * #>   ------- #>   seqinfo: 2 sequences from an unspecified genome; no seqlengths"},{"path":"/reference/compound.html","id":null,"dir":"Reference","previous_headings":"","what":"Assignment pipe — %<>%","title":"Assignment pipe — %<>%","text":"See magrittr::%<>% details.","code":""},{"path":"/reference/compound.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assignment pipe — %<>%","text":"","code":"lhs %<>% rhs"},{"path":"/reference/compound.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assignment pipe — %<>%","text":"lhs object serves initial value target. rhs function call using magrittr semantics.","code":""},{"path":"/reference/compound.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assignment pipe — %<>%","text":"result calling `rhs(lhs)`.","code":""},{"path":"/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling `rhs(lhs)`.","code":""}]
